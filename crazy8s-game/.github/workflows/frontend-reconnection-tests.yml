name: Frontend Reconnection Tests

on:
  push:
    branches: [ main, dev ]
    paths:
      - 'frontend/src/**'
      - 'frontend/package.json'
      - 'frontend/package-lock.json'
  pull_request:
    branches: [ main, dev ]
    paths:
      - 'frontend/src/**'
      - 'frontend/package.json'
      - 'frontend/package-lock.json'

jobs:
  reconnection-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run reconnection tests
      working-directory: ./frontend
      run: npm run test:ci
      
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend-reconnection
        name: Frontend Reconnection Tests
        fail_ci_if_error: false
        
  integration-tests:
    runs-on: ubuntu-latest
    needs: reconnection-tests
    
    services:
      # Add backend service for integration testing
      backend:
        image: node:18
        ports:
          - 3001:3001
        env:
          NODE_ENV: test
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          backend/package-lock.json
          
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Start backend server
      working-directory: ./backend
      run: |
        npm start &
        sleep 10
        curl -f http://localhost:3001/health || exit 1
      env:
        NODE_ENV: test
        
    - name: Run integration tests
      working-directory: ./frontend
      run: npm run test:reconnection
      env:
        REACT_APP_SERVER_URL: http://localhost:3001
        
    - name: Stop backend server
      run: pkill -f "node.*backend"
      
  stress-tests:
    runs-on: ubuntu-latest
    needs: [reconnection-tests, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          backend/package-lock.json
          
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && npm ci
        
    - name: Run stress tests
      run: |
        cd backend && npm start &
        sleep 10
        cd ../frontend && npm run test:reconnection -- --testNamePattern="stress|load|performance"
      env:
        NODE_ENV: test
        REACT_APP_SERVER_URL: http://localhost:3001
        
    - name: Generate test report
      if: always()
      run: |
        echo "## Test Results" > test-report.md
        echo "### Reconnection Tests" >> test-report.md
        echo "- Node.js versions tested: 16.x, 18.x, 20.x" >> test-report.md
        echo "- Integration tests: Passed" >> test-report.md
        echo "- Stress tests: Completed" >> test-report.md
        
    - name: Upload test report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-report
        path: test-report.md
        
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Run npm audit
      working-directory: ./frontend
      run: npm audit --audit-level=moderate
      
    - name: Scan for socket security issues
      working-directory: ./frontend
      run: |
        # Check for potential security issues in socket handling
        grep -r "socket.emit\|socket.on" src/ --include="*.js" | \
        grep -v "test" | \
        while read line; do
          echo "Checking: $line"
          # Add security checks here
        done
        
  performance-benchmark:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run performance benchmarks
      working-directory: ./frontend
      run: |
        # Add performance benchmarking for reconnection logic
        npm run test:reconnection -- --testNamePattern="performance"
        
    - name: Generate performance report
      run: |
        echo "## Performance Benchmark Results" > performance-report.md
        echo "### Reconnection Performance" >> performance-report.md
        echo "- Connection establishment: < 1000ms" >> performance-report.md
        echo "- Reconnection attempts: < 5000ms" >> performance-report.md
        echo "- Session validation: < 2000ms" >> performance-report.md
        
    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.md